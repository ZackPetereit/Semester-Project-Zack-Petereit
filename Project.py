# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NmqxlvQQwzVRvUKtypuWwZDTOzjy521-

Name: Zackary Petereit
Econ 8320 Semester Project
This code reads the U.S. Bureau of Labor Statistics (BLS) for Unemployment Rate, Total Nonfarm Employment, Average weekly hours,
Average weekly earnings, Import prices, and Export Prices. The code generates a csv file that is can be updated as new data is released by the BLS.
The code also prepares for Steamlit integration to generate a dashboard. 
"""
python3 -m pip install setuptools

import requests
import json
import datetime
import pandas as pd
import streamlit as st
import setuptools.dist


# Get the current year and month
current_year = datetime.datetime.now().year
current_month = datetime.datetime.now().month

# Define headers and request data
headers = {'Content-type': 'application/json'}
data = json.dumps({
    "seriesid": ['LNS14000000', 'CES0000000001', 'CES0500000002', 'CES0500000003', 'EIUIR', 'EIUIQ'],
    "startyear": str(current_year),
    "endyear": str(current_year)
})

# Make the request to the BLS API
response = requests.post('https://api.bls.gov/publicAPI/v2/timeseries/data/', data=data, headers=headers)
json_data = json.loads(response.text)

# Define mapping of series IDs to descriptive names
series_names = {
    'LNS14000000': 'Unemployment Rate',
    'CES0000000001': 'Total Non-Farm Employees',
    'CES0500000002': 'Average Weekly Hours',
    'CES0500000003': 'Average Hourly Earnings',
    'EIUIR': 'Import Prices',
    'EIUIQ': 'Export Prices'
}

# Process the data
def process_bls_data(json_data, series_names):
    all_data = []
    for series in json_data['Results']['series']:
        series_id = series['seriesID']
        for item in series['data']:
            year = item['year']
            period = item['period']
            value = item['value']
            footnotes = ",".join([footnote['text'] for footnote in item['footnotes'] if footnote])
            if 'M01' <= period <= 'M12':
                all_data.append([series_names.get(series_id, series_id), year, period, value, footnotes])
    df = pd.DataFrame(all_data, columns=["series_name", "year", "period", "value", "footnotes"])
    df['date'] = pd.to_datetime(df['year'] + df['period'].str[1:], format='%Y%m')
    df['value'] = pd.to_numeric(df['value'])
    return df

# Convert JSON data to DataFrame
new_data_df = process_bls_data(json_data, series_names)

# Load existing data if available
try:
    existing_data_df = pd.read_csv('bls_data.csv', parse_dates=['date'])
    # Append new data
    combined_df = pd.concat([existing_data_df, new_data_df]).drop_duplicates().reset_index(drop=True)
except FileNotFoundError:
    combined_df = new_data_df

# Save the updated dataset
combined_df.to_csv('bls_data.csv', index=False)

# Streamlit dashboard
st.title('BLS Data Dashboard')
st.subheader(f'Data from 2023 to {current_month} {current_year}')

# Display the data
st.write(combined_df)

# Plot the data for each series
for series_name in combined_df['series_name'].unique():
    series_data = combined_df[combined_df['series_name'] == series_name]
    st.subheader(series_name)
    st.line_chart(series_data.set_index('date')['value'])
